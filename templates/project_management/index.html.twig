{% extends 'base.html.twig' %}

{% block title %}Hello Project-Management Controller!{% endblock %}

{% block body %}

<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@2.23.2/dist/editor.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@1.7.0/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@2.6.2/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/image@2.6.2/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/table@2.0.1/dist/table.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/embed@2.5.1/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/quote@2.4.0/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/delimiter@1.2.0/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/marker@1.2.2/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/link@2.4.0/dist/bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/inline-code@1.3.1/dist/bundle.min.js"></script>
<script src="https://togetherjs.com/togetherjs-min.js"></script>

<script>
TogetherJSConfig_on = {
  ready: function () {}
};
TogetherJS_hub_on = {
  "my-event": function (msg) {
  }
};
TogetherJSConfig_hubBase = "https://hub.togetherjs.com";

var TogetherJSConfig_something = "foo";
  // TogetherJS configuration would go here, but we'll talk about that
  // later

var visibilityChangeFromRemote = false;

function fireTogetherJSVisibility(element, isVisible) {
  if (visibilityChangeFromRemote) {
    return;
  }
  var elementFinder = TogetherJS.require("elementFinder");
  var location = elementFinder.elementLocation(element);
  TogetherJS.send({type: "visibilityChange", isVisible: isVisible, element: location});
}
TogetherJS.hub.on("visibilityChange", function (msg) {
  if (! msg.sameUrl) {
    return;
  }
  var elementFinder = TogetherJS.require("elementFinder");
  // If the element can't be found this will throw an exception:
  var element = elementFinder.findElement(msg.element);
  visibilityChangeFromRemote = true;
  try {
    MyApp.changeVisibility(element, msg.isVisible);
  } finally {
    visibilityChangeFromRemote = false;
  }
});

TogetherJS.hub.on("togetherjs.hello", function (msg) {
  if (! msg.sameUrl) {
    return;
  }
  MyApp.allToggleElements.forEach(function (el) {
    var isVisible = $(el).is(":visible");
    fireTogetherJSVisibility(el, isVisible);
  });
});
$.fn.syncShow = function () {
  this.show();
  this.trigger("visibilityChange");
};

$.fn.syncHide = function () {
  this.hide();
  this.trigger("visibilityChange");
};

$(document).on("visibilityChange", function () {
  MyApp.emit("visibilityChange", this, $(this).is(":visible"));
});

MyApp.changeVisibility = function (el, isVisible) {
  if (isVisible && ! el.is(":visible")) {
    el.syncShow();
  } else if ((! isVisible) && el.is(":visible")) {
    el.syncHide();
  }
};

</script>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! âœ…</h1>

    <button id="start-togetherjs" type="button"
    onclick="TogetherJS(this); return false"
    data-end-togetherjs-html="End TogetherJS">
    Start TogetherJS
    </button>

    <div id="editorjs"></div>
    
</div>

<script>
const editor = new EditorJS({
  /**
   * Id of Element that should contain Editor instance
   */
  holder: 'editorjs',
    
  placeholder: 'Cliquez ici pour commencer',

  tools: { 
    header: {
      class: Header, 
      inlineToolbar: ['link'] 
    }, 
    list: { 
      class: List, 
      inlineToolbar: true 
    },
    table: {
      class: Table,
      inlineToolbar : true
    },
    image: {
      class: ImageTool,
      inlineToolbar : true,
        endpoints: {
          byFile: '/ajax/snippet/image/send', // Your backend file uploader endpoint
          byUrl: '/ajax/snippet/image/send', // Your endpoint that provides uploading by Url
        },
    },
    embed: {
      class: Embed,
      inlineToolbar : true
    },
    inlinecode: {
      class: InlineCode,
      inlineToolbar : true
    },
    quote: {
      class: Quote,
      inlineToolbar : true
    },
    table: {
      class: Table,
      inlineToolbar : true
    },
  },
});
</script>
{% endblock %}
